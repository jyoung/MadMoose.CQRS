# ---------------------------------------------------------------------------------------------------
# Default build tasks
#
# DO NOT EDIT THIS FILE
# Your changes may be overriden if updated
# Add your tasks / functions in build.ps1
# ---------------------------------------------------------------------------------------------------

task Default -depends Build-Debug 

task Build-Init -Description "Install solution packages" -depends Build-Clean {
    if (!(Test-Path $packageDirectory)) {
        New-Item $packageDirectory -itemType directory
    }
    
    $packages = Join-Path -path $nugetDirectory -childPath "packages.config"

    $outputDirectory = Join-Path -path $sourceDirectory -childPath "packages"

    exec { & $nuget install $packages -o $outputDirectory}
}

task Build-Clean -Description "Executes clean on the solution" { 
    exec { msbuild $solution /t:Clean}
}

task Build-Debug -Description "Executes the debug build" -depends Build-Init {
    exec { msbuild $solution /p:Configuration=Debug /m}
}

task Build-Release -Description "Executes the release build" -depends Build-Init {
    #default to building the 1.0.0.0 version, overrides happen through the function call
    Build-ReleaseFn "1.0.0.0"
}

#-------------------------------------------------------------------------------
# Build the release artifacts with the supplied version
#-------------------------------------------------------------------------------
function Build-ReleaseFn([string] $version) {
	    
    Update-AssemblyInfoFiles $version
    
    exec { msbuild $solution /p:Configuration=Release /m}
    
    Reset-AssemblyInfoFiles
}

#-------------------------------------------------------------------------------
# Update version numbers of AssemblyInfo.cs
#-------------------------------------------------------------------------------
function Update-AssemblyInfoFiles ([string] $version) {
    $assemblyVersionPattern = 'AssemblyVersion\("[0-9]+(\.([0-9]+|\*)){1,3}"\)'
    $fileVersionPattern = 'AssemblyFileVersion\("[0-9]+(\.([0-9]+|\*)){1,3}"\)'
    $assemblyVersion = 'AssemblyVersion("' + $version + '")';
    $fileVersion = 'AssemblyFileVersion("' + $version + '")';
    
    Get-ChildItem $sourceDirectory -r -filter AssemblyInfo.cs | ForEach-Object {
        $filename = $_.Directory.ToString() + '\' + $_.Name
        $filename + ' -> ' + $version
        
        # If you are using a source control that requires to check-out files before 
        # modifying them, make sure to check-out the file here.
        # For example, TFS will require the following command:
        # tf checkout $filename
    
        #Write-Output "Updating AssemblyInfo for " $filename
        (Get-Content $filename) | ForEach-Object {
            % {$_ -replace $assemblyVersionPattern, $assemblyVersion } |
            % {$_ -replace $fileVersionPattern, $fileVersion }
        } | Set-Content $filename
    }
}

#-------------------------------------------------------------------------------
# Reset Assembly info files to prevent merge issues
#-------------------------------------------------------------------------------
function Reset-AssemblyInfoFiles {
    Update-AssemblyInfoFiles "1.0.0.0"
}